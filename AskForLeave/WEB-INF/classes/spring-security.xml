<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- 配置不拦截的资源 -->
    <security:http pattern="/login.jsp" security="none"/>
    <security:http pattern="/failer.jsp" security="none"/>
    <security:http pattern="/source/css/**" security="none"/>
    <security:http pattern="/source/img/**" security="none"/>
    <security:http pattern="/source/plugins/**" security="none"/>

    <!--
    	配置具体的规则
    	auto-config="true"	不用自己编写登录的页面，框架提供默认登录页面
    	use-expressions="false"	是否使用SPEL表达式（没学习过）,如果不选择false,则需要使用该表达式来配置权限,否则Security会判断你所使用的信道并不是安全的而拒绝.
    	此处为true则开启SPEL表达式,所有需要SPEL表达式的地方需要重新书写,如access要从"ROLE_USER","ROLE_ADMIN"改成hasAnyRole('ROLE_USER','ROLE_ADMIN')
    	<%@ taglib prefix="security" uri="http://www.springframework.org/security/tags" %>则在JSP页面中可以使用SPEL表达式了.
    	可以使用<security:authorize access="hasRole('ROLE_ADMIN')"></security:authorize>标签使得标签体内的内容只对access中的用户权限开放.具体在aside的用户管理中使用.
    	可以使用<security:authentication property="principal.username"/>指示当前使用者的信息.principal表示当前使用的用户.
    -->
    <security:http auto-config="true" use-expressions="true">
        <!-- 配置具体的拦截的规则 pattern="请求路径的规则" access="访问系统的人，必须有ROLE_USER的角色" -->
        <security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_MANAGER1','ROLE_MANAGER2','ROLE_MANAGER3','ROLE_MANAGER4')"/>

        <!-- 定义跳转的具体的页面 -->
        <security:form-login
                login-page="/login.jsp"
                login-processing-url="/login"
                default-target-url="/index.jsp"
                authentication-failure-forward-url="/failer.jsp"
                authentication-success-forward-url="/index.jsp"
        />

        <!-- 关闭跨域请求 -->
        <security:csrf disabled="true"/>

        <!-- 退出 -->
        <security:logout invalidate-session="true" logout-url="/logout" logout-success-url="/login.jsp" />

    </security:http>

    <!-- 切换成数据库中的用户名和密码 -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="usersService">
            <!-- 配置加密的方式 未自行配置密文格式前不能使用下面语句,否则会拦截.-->
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>

    </security:authentication-manager>

    <!--开启方法权限控制 jsr250、secured-->
<!--    <security:global-method-security jsr250-annotations="enabled"/>-->
    <!--secured是spring本身具有的一个注解,不需要再外来导包.-->
    <security:global-method-security secured-annotations="enabled"/>

    <!-- 配置加密类 -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!-- 提供了入门的方式，在内存中存入用户名和密码
    <security:authentication-manager>
    	<security:authentication-provider>
    		<security:user-service>
    			<security:user name="admin" password="{noop}admin" authorities="ROLE_USER"/>
    		</security:user-service>
    	</security:authentication-provider>
    </security:authentication-manager>
        -->

</beans>












